################################################
# CMakeLists for project: SantaKaggle
# date: 2022-12-12
#
# generated by mtools-project.py
################################################

cmake_minimum_required(VERSION 3.10.1)

if( WIN32 )
	# look for vcpkg on windows
	if (DEFINED ENV{VCPKG_DIR})
		string(REPLACE "\\" "/" _vcpkg_dir "$ENV{VCPKG_DIR}")
	else ()
		find_file( _vcpkg_exe "vcpkg.exe" PATHS ENV PATH)
		if (_vcpkg_exe)			
			get_filename_component(_vcpkg_dir ${_vcpkg_exe} DIRECTORY)
		endif()		
	endif()	
	if (_vcpkg_dir)	
		set(CMAKE_TOOLCHAIN_FILE "${_vcpkg_dir}/scripts/buildsystems/vcpkg.cmake")					
		message(STATUS "Windows: vcpkg found at [${_vcpkg_dir}]")	
	else()
		message(STATUS "Windows: vcpkg not found.")	
	endif()
	
    # only Debug and Release configurations
    SET(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo" CACHE STRING "" FORCE)
	
endif()

# use the same compilers as that used for compiling mtools
set(CMAKE_CXX_COMPILER "${MTOOLS_CXX_COMPILER}" CACHE STRING "" FORCE)
set(CMAKE_C_COMPILER "${MTOOLS_C_COMPILER}" CACHE STRING "" FORCE)

project(SantaKaggle)

# release is the default build type
if (NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif ()

# add the project main directory as a possible location for findXXX.cmake scripts. 
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR})

find_package(mtools REQUIRED)


######### external dependencies #########

# (look also for FindXXX.cmake in the project dir.)
# for exemple 
# find_package(GUROBI REQUIRED)

#########################################


file(GLOB project_SRC "*.cpp" "*.hpp" "*.h" "*.inl" "*.c")

add_executable("${PROJECT_NAME}" ${project_SRC})

target_link_libraries("${PROJECT_NAME}" PUBLIC mtools)


# compile options
if(WIN32)
	target_compile_options("${PROJECT_NAME}" PUBLIC "/std:c++17")
	set(CMAKE_CXX_STANDARD 17)
	set(CMAKE_CXX_STANDARD_REQUIRED ON)
	set(CMAKE_CXX_EXTENSIONS OFF)
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /DMTOOLS_DEBUG_FLAG")	
	# hack for RelWithDebINfo configuration otherwise compile never ends on MSVC
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/Zi /Gm- /Ox /Ob0 /DMTOOLS_DEBUG_FLAG")	
else()
	target_compile_options("${PROJECT_NAME}" PUBLIC "-std=c++17")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DMTOOLS_DEBUG_FLAG -Wall")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -DMTOOLS_DEBUG_FLAG -Wall")
	set(CMAKE_CXX_FLAGS_RELEASE  "${CMAKE_CXX_FLAGS_RELEASE} -Wall")
endif()


######### external dependencies #########

# add here other dependencies such as:
#    find_package(GSL)
#    target_link_libraries("${PROJECT_NAME}" PUBLIC GSL::gsl)

#########################################


# set the project as the default startup project in visual studio.
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT "${PROJECT_NAME}")

# move CMake specific project inside filter "CMakePredefinedTargets".
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(PREDEFINED_TARGETS_FOLDER "CustomTargets")

message(STATUS "")
message(STATUS "")
if (NOT WIN32)
	message(STATUS "Project ${PROJECT_NAME} created for make with configuration ${CMAKE_BUILD_TYPE}")
	message(STATUS "    - Debug : [${CMAKE_CXX_FLAGS_DEBUG}]")
	message(STATUS "    - RelWithDebInfo : [${CMAKE_CXX_FLAGS_RELWITHDEBINFO}]")
	message(STATUS "    - Release : [${CMAKE_CXX_FLAGS_RELEASE}]")
else()
	message(STATUS "Project ${PROJECT_NAME} created for MSVC with configurations")
	message(STATUS "    - Debug : [${CMAKE_CXX_FLAGS_DEBUG}]")
	message(STATUS "    - RelWithDebInfo : [${CMAKE_CXX_FLAGS_RELWITHDEBINFO}]")
	message(STATUS "    - Release : [${CMAKE_CXX_FLAGS_RELEASE}]")
endif()
message(STATUS "")
message(STATUS "")

#end of file

